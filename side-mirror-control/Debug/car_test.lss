
car_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000600  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000544  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038a  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030c  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a4  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__vector_4>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	02 d0       	rcall	.+4      	; 0x40 <main>
  3c:	7b c0       	rjmp	.+246    	; 0x134 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <main>:

unsigned char sec=0;
signed char counter;
int main(void)
{
    SET_BIT(DDRB,0);
  40:	b8 9a       	sbi	0x17, 0	; 23
	SET_BIT(DDRB,2);
  42:	ba 9a       	sbi	0x17, 2	; 23
	SET_BIT(DDRB,3);
  44:	bb 9a       	sbi	0x17, 3	; 23
	CLR_BIT(DDRB,1);
  46:	b9 98       	cbi	0x17, 1	; 23
	char flag=0;
	timer1_COM_init_interrupt();
  48:	4f d0       	rcall	.+158    	; 0xe8 <timer1_COM_init_interrupt>
    while (1) 
    {
		CLR_BIT(TCCR0A,COM0A1);
		flag=0;
  4a:	f1 2c       	mov	r15, r1
  4c:	df 2d       	mov	r29, r15
			SET_BIT(PORTB, 2);
			if (sec >= 10)
			{
				CLR_BIT(PORTB, 2);
				while (READ_BIT(PINB, 1) == 1);
				counter=10;
  4e:	0a e0       	ldi	r16, 0x0A	; 10
		{
			counter = sec;
			if (flag==0)
			{
				sec=0;
				flag=1;
  50:	11 e0       	ldi	r17, 0x01	; 1
	CLR_BIT(DDRB,1);
	char flag=0;
	timer1_COM_init_interrupt();
    while (1) 
    {
		CLR_BIT(TCCR0A,COM0A1);
  52:	8a b5       	in	r24, 0x2a	; 42
  54:	8f 77       	andi	r24, 0x7F	; 127
  56:	8a bd       	out	0x2a, r24	; 42
		flag=0;
  58:	cd 2f       	mov	r28, r29
		while (READ_BIT(PINB, 1) == 1)
  5a:	18 c0       	rjmp	.+48     	; 0x8c <main+0x4c>
		{
			counter = sec;
  5c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  60:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counter>
			if (flag==0)
  64:	c1 11       	cpse	r28, r1
  66:	03 c0       	rjmp	.+6      	; 0x6e <main+0x2e>
			{
				sec=0;
  68:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <_edata>
				flag=1;
  6c:	c1 2f       	mov	r28, r17
			}
			timer0_wave_fastPWM(3);
  6e:	83 e0       	ldi	r24, 0x03	; 3
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	4a d0       	rcall	.+148    	; 0x108 <timer0_wave_fastPWM>
			SET_BIT(PORTB, 2);
  74:	c2 9a       	sbi	0x18, 2	; 24
			if (sec >= 10)
  76:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  7a:	8a 30       	cpi	r24, 0x0A	; 10
  7c:	38 f0       	brcs	.+14     	; 0x8c <main+0x4c>
			{
				CLR_BIT(PORTB, 2);
  7e:	c2 98       	cbi	0x18, 2	; 24
				while (READ_BIT(PINB, 1) == 1);
  80:	b1 99       	sbic	0x16, 1	; 22
  82:	fe cf       	rjmp	.-4      	; 0x80 <main+0x40>
				counter=10;
  84:	00 93 61 00 	sts	0x0061, r16	; 0x800061 <counter>
				sec=0;
  88:	d0 93 60 00 	sts	0x0060, r29	; 0x800060 <_edata>
	timer1_COM_init_interrupt();
    while (1) 
    {
		CLR_BIT(TCCR0A,COM0A1);
		flag=0;
		while (READ_BIT(PINB, 1) == 1)
  8c:	b1 99       	sbic	0x16, 1	; 22
  8e:	e6 cf       	rjmp	.-52     	; 0x5c <main+0x1c>
				while (READ_BIT(PINB, 1) == 1);
				counter=10;
				sec=0;
			}
		}
		if (flag==1)
  90:	c1 30       	cpi	r28, 0x01	; 1
  92:	f9 f6       	brne	.-66     	; 0x52 <main+0x12>
		{
			timer0_wave_fastPWM(3);
  94:	83 e0       	ldi	r24, 0x03	; 3
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	37 d0       	rcall	.+110    	; 0x108 <timer0_wave_fastPWM>
			sec=0;
  9a:	f0 92 60 00 	sts	0x0060, r15	; 0x800060 <_edata>
			while (counter>=0)
  9e:	0d c0       	rjmp	.+26     	; 0xba <main+0x7a>
			{
				CLR_BIT(PORTB, 2);
  a0:	c2 98       	cbi	0x18, 2	; 24
				SET_BIT(PORTB, 3);
  a2:	c3 9a       	sbi	0x18, 3	; 24
				if (sec >=1)
  a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a8:	88 23       	and	r24, r24
  aa:	39 f0       	breq	.+14     	; 0xba <main+0x7a>
				{
					counter--;
  ac:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter>
  b0:	81 50       	subi	r24, 0x01	; 1
  b2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <counter>
					sec=0;
  b6:	f0 92 60 00 	sts	0x0060, r15	; 0x800060 <_edata>
		}
		if (flag==1)
		{
			timer0_wave_fastPWM(3);
			sec=0;
			while (counter>=0)
  ba:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <counter>
  be:	88 23       	and	r24, r24
  c0:	7c f7       	brge	.-34     	; 0xa0 <main+0x60>
				{
					counter--;
					sec=0;
				}
			}
			CLR_BIT(PORTB, 3);
  c2:	c3 98       	cbi	0x18, 3	; 24
  c4:	c6 cf       	rjmp	.-116    	; 0x52 <main+0x12>

000000c6 <__vector_4>:
		
    }
}

ISR(TIMER1_OVF_vect)
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
	sec++;
  d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <timer1_COM_init_interrupt>:


void timer1_COM_init_interrupt(void)
{
	
	OCR1A = 80;
  e8:	80 e5       	ldi	r24, 0x50	; 80
  ea:	8e bd       	out	0x2e, r24	; 46
	
	SET_BIT(TCCR1, CS10);
  ec:	80 b7       	in	r24, 0x30	; 48
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	80 bf       	out	0x30, r24	; 48
	SET_BIT(TCCR1, CS11);
  f2:	80 b7       	in	r24, 0x30	; 48
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	80 bf       	out	0x30, r24	; 48
	SET_BIT(TCCR1, CS13);
  f8:	80 b7       	in	r24, 0x30	; 48
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	80 bf       	out	0x30, r24	; 48
	
	sei();
  fe:	78 94       	sei
	SET_BIT(TIMSK, TOIE1);
 100:	89 b7       	in	r24, 0x39	; 57
 102:	84 60       	ori	r24, 0x04	; 4
 104:	89 bf       	out	0x39, r24	; 57
 106:	08 95       	ret

00000108 <timer0_wave_fastPWM>:


void timer0_wave_fastPWM(short value)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,0);
 108:	b8 9a       	sbi	0x17, 0	; 23
	/* select fast PWM mode*/
	SET_BIT(TCCR0A,WGM00);
 10a:	9a b5       	in	r25, 0x2a	; 42
 10c:	91 60       	ori	r25, 0x01	; 1
 10e:	9a bd       	out	0x2a, r25	; 42
	SET_BIT(TCCR0A,WGM01);
 110:	9a b5       	in	r25, 0x2a	; 42
 112:	92 60       	ori	r25, 0x02	; 2
 114:	9a bd       	out	0x2a, r25	; 42
	/* load a value in OCR0 */
	OCR0A=value*64;
 116:	82 95       	swap	r24
 118:	88 0f       	add	r24, r24
 11a:	88 0f       	add	r24, r24
 11c:	80 7c       	andi	r24, 0xC0	; 192
 11e:	89 bd       	out	0x29, r24	; 41
	/* select timer clock */
	SET_BIT(TCCR0B,CS00);
 120:	83 b7       	in	r24, 0x33	; 51
 122:	81 60       	ori	r24, 0x01	; 1
 124:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0B,CS02);
 126:	83 b7       	in	r24, 0x33	; 51
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	83 bf       	out	0x33, r24	; 51
	/* Set OC0 on compare match, clear OC0 at BOTTOM,(inverting mode)*/
	//SET_BIT(TCCR0A,COM0A0);
	SET_BIT(TCCR0A,COM0A1);
 12c:	8a b5       	in	r24, 0x2a	; 42
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	8a bd       	out	0x2a, r24	; 42
 132:	08 95       	ret

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
